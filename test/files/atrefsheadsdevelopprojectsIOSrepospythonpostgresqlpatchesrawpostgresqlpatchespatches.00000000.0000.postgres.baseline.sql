--
-- PostgreSQL database dump
--

-- Dumped from database version 12.1
-- Dumped by pg_dump version 12.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: patches; Type: DATABASE; Schema: -; Owner: patches
--

-- CREATE DATABASE patches WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'en_US.UTF-8'; Postgres 13
set client_min_messages = error;  -- Avoid warning about the en_US.UTF-8 locale
CREATE DATABASE patches WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_CTYPE = 'en_US.UTF-8';  -- Postgres 12
\set pwd `bash -c "echo $PATCHES_POSTGRESQL_TEMPORARY_USER_PASSWORD"`
create user patches
    createdb
    encrypted password :'pwd';


ALTER DATABASE patches OWNER TO postgres;

\connect patches

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: sp_patch_installed(character varying, character varying, character varying, character varying); Type: PROCEDURE; Schema: public; Owner: patches
--

CREATE PROCEDURE public.sp_patch_installed(database character varying, major character varying, minor character varying, patch character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE
    count INTEGER;
BEGIN
    SELECT COUNT(*) INTO count FROM databases d WHERE d.name = database;
    if count = 0 then
        INSERT INTO databases(name) VALUES(database);
    end if;
    INSERT INTO installed_patches(database_id, major, minor, name)
    SELECT d.id, major, minor, patch
    FROM databases d WHERE name = database;
END;
$$;


ALTER PROCEDURE public.sp_patch_installed(database character varying, major character varying, minor character varying, patch character varying) OWNER TO patches;

--
-- Name: fn_patch_installed(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: patches
--

create or replace function public.fn_patch_installed(database character varying, major character varying, minor character varying)
returns integer
language plpgsql
as
$$
declare
    cnt integer;
BEGIN
    SELECT COUNT(*) INTO cnt
    FROM public.databases d, public.installed_patches p
    WHERE d.name = fn_patch_installed.database
      AND d.id = p.database_id
      AND p.major = fn_patch_installed.major
      AND p.minor = fn_patch_installed.minor;
    return cnt;
END;
$$;

alter function public.fn_patch_installed(varchar, varchar, varchar) owner to patches;

--
-- Name: databases_primary_key_sequence; Type: SEQUENCE; Schema: public; Owner: patches
--

CREATE SEQUENCE public.databases_primary_key_sequence
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.databases_primary_key_sequence OWNER TO patches;

--
-- Name: SEQUENCE databases_primary_key_sequence; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON SEQUENCE public.databases_primary_key_sequence IS 'Autogenerated surrogate keys for table databases';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: databases; Type: TABLE; Schema: public; Owner: patches
--

CREATE TABLE public.databases (
    id integer DEFAULT nextval('public.databases_primary_key_sequence'::regclass) NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.databases OWNER TO patches;

--
-- Name: TABLE databases; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON TABLE public.databases IS 'List of managed databases';


--
-- Name: COLUMN databases.id; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.databases.id IS 'Autogenerated surrogate primary key';


--
-- Name: installed_patches_primary_key_sequence; Type: SEQUENCE; Schema: public; Owner: patches
--

CREATE SEQUENCE public.installed_patches_primary_key_sequence
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.installed_patches_primary_key_sequence OWNER TO patches;

--
-- Name: installed_patches; Type: TABLE; Schema: public; Owner: patches
--

CREATE TABLE public.installed_patches (
    id integer DEFAULT nextval('public.installed_patches_primary_key_sequence'::regclass) NOT NULL,
    major character varying NOT NULL,
    minor character varying NOT NULL,
    database_id integer NOT NULL,
    name character varying NOT NULL,
    installed timestamptz DEFAULT now() NOT NULL
);


ALTER TABLE public.installed_patches OWNER TO patches;

--
-- Name: COLUMN installed_patches.id; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.installed_patches.id IS 'Automatic surrogate key';


--
-- Name: COLUMN installed_patches.major; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.installed_patches.major IS 'Second part of file name, typically a date according to ISO8601';


--
-- Name: COLUMN installed_patches.minor; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.installed_patches.minor IS 'Third part of file name, typically time according to ISO 8601';


--
-- Name: COLUMN installed_patches.database_id; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.installed_patches.database_id IS 'Which database this patch belongs to. First part of file name is used to identify the database name';


--
-- Name: COLUMN installed_patches.name; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.installed_patches.name IS 'Last part of file name';


--
-- Name: COLUMN installed_patches.installed; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON COLUMN public.installed_patches.installed IS 'Patch install time';


--
-- Data for Name: databases; Type: TABLE DATA; Schema: public; Owner: patches
--

COPY public.databases (id, name) FROM stdin;
\.


--
-- Data for Name: installed_patches; Type: TABLE DATA; Schema: public; Owner: patches
--

COPY public.installed_patches (id, major, minor, database_id, name, installed) FROM stdin;
\.


--
-- Name: databases_primary_key_sequence; Type: SEQUENCE SET; Schema: public; Owner: patches
--

SELECT pg_catalog.setval('public.databases_primary_key_sequence', 1, false);


--
-- Name: installed_patches_primary_key_sequence; Type: SEQUENCE SET; Schema: public; Owner: patches
--

SELECT pg_catalog.setval('public.installed_patches_primary_key_sequence', 1, false);


--
-- Name: databases databases_primary_key; Type: CONSTRAINT; Schema: public; Owner: patches
--

ALTER TABLE ONLY public.databases
    ADD CONSTRAINT databases_primary_key PRIMARY KEY (id);


--
-- Name: installed_patches installed_patches_primary_key; Type: CONSTRAINT; Schema: public; Owner: patches
--

ALTER TABLE ONLY public.installed_patches
    ADD CONSTRAINT installed_patches_primary_key PRIMARY KEY (id);


--
-- Name: databases_natural_key; Type: INDEX; Schema: public; Owner: patches
--

CREATE UNIQUE INDEX databases_natural_key ON public.databases USING btree (name);


--
-- Name: INDEX databases_natural_key; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON INDEX public.databases_natural_key IS 'Natural key for table databases';


--
-- Name: installed_patches_natural_key; Type: INDEX; Schema: public; Owner: patches
--

CREATE UNIQUE INDEX installed_patches_natural_key ON public.installed_patches USING btree (major, minor, database_id);


--
-- Name: INDEX installed_patches_natural_key; Type: COMMENT; Schema: public; Owner: patches
--

COMMENT ON INDEX public.installed_patches_natural_key IS 'Natural key for table installed_patches';


--
-- Name: installed_patches installed_patches_database_foreign_key; Type: XY CONSTRAINT; Schema: public; Owner: patches
--

ALTER TABLE ONLY public.installed_patches
    ADD CONSTRAINT installed_patches_database_foreign_key FOREIGN KEY (database_id) REFERENCES public.databases(id);


--
-- PostgreSQL database dump complete
--

