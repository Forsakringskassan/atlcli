# -*- python -*-
# ex: set filetype=python:
import os
import logging
from buildbot.plugins import *

logging.basicConfig(level=logging.DEBUG)

GIT_REPO = 'ssh://git@bitb.mynd.se:7999/ios/python-postgresql-patches.git'
NEXUS_IQ_DESCRIPTION = 'Scans the application installed in a separate virtual environment for vulnerabilities'


@util.renderer
def nexus_repo_renderer(props):
    """
    :param branch_name: The current branch name
    :return: The nexus repo to use for uploads.
    """
    branch_name = props.getProperty('branch')
    nexus_repo = "https://python.repo.mynd.se/repository/snapshots/"
    if branch_name == 'master':
        nexus_repo = "https://python.repo.mynd.se/repository/production/"
    elif branch_name == 'release':
        nexus_repo = "https://python.repo.mynd.se/repository/releases/"
    elif branch_name == 'develop':
        nexus_repo = "https://python.repo.mynd.se/repository/develop/"
    logging.debug(f"nexus_repo={nexus_repo}")
    return nexus_repo


@util.renderer
def wheel_renderer_current(props):
    """
    :param props: Current properties
    :return: The wheel file, relative to current directory, with proper version from VERSION file.
    """
    return get_wheel(props, './')


@util.renderer
def wheel_renderer_parent(props):
    """
    :param props: Current properties
    :return: The wheel file, relative to parent directory, with proper version from VERSION file.
    """
    return get_wheel(props, '../')


def get_wheel(props, prefix):
    __version__ = get_version(props)
    wheel = f"{prefix}dist/postgresqlpatches-{__version__}-py3-none-any.whl"
    logging.debug(f"wheel={wheel}")
    return wheel


@util.renderer
def version_renderer(props):
    version = get_version(props)
    return version


def get_version(props):
    workdir = props.getProperty('builddir')
    version_file_name = os.path.join(workdir, 'build', 'postgresqlpatches', 'VERSION')
    logging.debug(f"properties={str(props)}")
    with open(version_file_name, 'r') as version_file:
        __version__ = version_file.read()
    return __version__


@util.renderer
def tag_input_renderer(props):
    """
    :param props: Current properties
    :return: The wheel file with proper version from VERSION file.
    """
    revision = props.getProperty('revision')
    branch = props.getProperty('branch')
    tag_input = f"{revision}\trefs/heads/{branch}\tpython-postgresql-patches\tIOS"
    logging.debug(f"tag_input={tag_input}")
    return tag_input

@util.renderer
def tag_commit_renderer(props):
    """
    :param props: Current properties
    :return: True if branch is master, develop or release. False for other branches
    """
    branch = props.getProperty('branch')
    tag_branch = branch == 'master' or branch == 'release' or branch == 'develop'
    logging.debug(f"tag_branch={tag_branch}")
    return tag_branch

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Turn off phone home since it will not get thrugh the firewall
c['buildbotNetUsageData'] = None

# ========= WORKERS =========

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.LocalWorker('agent007')
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

# ========= CHANGESOURCES =========

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.
c['change_source'] = []
build_branches = []
if os.environ.get('PGPASSWORD') is None:
    raise Exception("PGPASSWORD environment variable must be set. . ")
PYTHON_POSTGRESQL_PATCHES_BRANCHES = os.environ.get('PYTHON_POSTGRESQL_PATCHES_BRANCHES')
if PYTHON_POSTGRESQL_PATCHES_BRANCHES is None:
    raise Exception("PYTHON_POSTGRESQL_PATCHES_BRANCHES must be set. You forgot to 'source ./environment.sh'. ")
if os.environ.get('TWINE_USERNAME') is None:
    raise Exception("TWINE_USERNAME must be set. . ")
if os.environ.get('TWINE_PASSWORD') is None:
    raise Exception("TWINE_PASSWORD must be set. . ")
NEXUS_IQ_USERNAME = os.environ.get('NEXUS_IQ_USERNAME')
if NEXUS_IQ_USERNAME is None:
    raise Exception("NEXUS_IQ_USERNAME must be set.")
NEXUS_IQ_PASSWORD = os.environ.get('NEXUS_IQ_PASSWORD')
if NEXUS_IQ_PASSWORD is None:
    raise Exception("NEXUS_IQ_PASSWORD must be set.")
PYTHON = os.environ.get('PYTHON')
logging.debug(f"PYTHON_POSTGRESQL_PATCHES_BRANCHES={PYTHON_POSTGRESQL_PATCHES_BRANCHES}")
GIT_BIN = os.environ.get('GIT_BIN')
c['change_source'].append(changes.GitPoller(
    GIT_REPO,
    gitbin=GIT_BIN,
    workdir='gitpoller-workdir',
    branches=True,
    buildPushesWithNoCommits=True,  # Builds each branch separately
    pollInterval=30,
    pollAtLaunch=True))

# ========= SCHEDULERS =========

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = [
    schedulers.AnyBranchScheduler(
        name='all',
        builderNames=['agents'],
    ),
    schedulers.ForceScheduler(
        name='force',
        builderNames=['agents'])
]

# ========= BUILDERS =========

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# Check out the source
factory.addStep(steps.Git(name="git-checkout",
                          description='Clones gitrepo and checks out the proper branch',
                          repourl=GIT_REPO,
                          mode='incremental',
                          haltOnFailure=True))
# Build the project
factory.addStep(steps.ShellCommand(name="python-build",
                                   description='Builds the project using python module build. '
                                               'If building master branch proper semantic versioning is used. All '
                                               'other branches adds a timestamp after a + to the semantic version.',
                                   command=[PYTHON, "-m", "build", "-n"],
                                   workdir="./build",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True))
# Install the built code
factory.addStep(steps.ShellCommand(name="install-wheel",
                                   description='Installs the wheel file in a separate virtual environment',
                                   command=["sh", "install.sh", wheel_renderer_parent],
                                   workdir="./build/verify",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True))
# Delete all databases
factory.addStep(steps.ShellCommand(name="postgresql-drop-databases",
                                   description='Deletes all databases',
                                   command=["psql",
                                            "-v", "ON_ERROR_STOP=1",
                                            "-f", "reset_databases.sql",
                                            "postgres",
                                            "postgres"],
                                   workdir="./build/autobuild",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True))

# Run the installed code
factory.addStep(steps.ShellCommand(name="run-postgresqlpatches",
                                   description='Runs the installed module in its separate virtual environment',
                                   command=["sh", "run.sh"],
                                   workdir="./build/verify",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True))
# Scan using nexus iq
factory.addStep(steps.ShellCommand(name="scan-nexus-iq",
                                   description=NEXUS_IQ_DESCRIPTION,
                                   command=["sh", "analyze.sh"],
                                   workdir="./build/verify",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True))

# Upload to nexus
factory.addStep(steps.ShellCommand(name="twine-upload",
                                   description='Uploads the built project to python.repo.mynd.se. '
                                               'Master branch goes to production. '
                                               'Release branch goes to releases. '
                                               'Develop branch goes to develop. '
                                               'Other branches goes to snapshots.',
                                   command=[PYTHON,
                                            "-m",
                                            "twine",
                                            "upload",
                                            "--repository-url",
                                            nexus_repo_renderer,
                                            wheel_renderer_current],
                                   workdir="./build",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True))

# Tag branch
factory.addStep(steps.ShellCommand(name="bitbucket-tag",
                                   description='Tags the branch with the version used for upload',
                                   command=["atlcli",
                                            "bitb",
                                            "create-tags",
                                            version_renderer],
                                   initialStdin=tag_input_renderer,
                                   workdir="./build",
                                   env={"PYTHONPATH": "."},
                                   want_stdout=True,
                                   want_stderr=True,
                                   usePTY=False,
                                   haltOnFailure=True,
                                   doStepIf=tag_commit_renderer))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="agents",
                       workernames=["agent007"],
                       factory=factory))

# ========= BUILDBOT SERVICES =========

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

# ========= PROJECT IDENTITY =========

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Postgresqlpatches CI"
c['titleURL'] = "https://bitb.mynd.se/projects/IOS/repos/python-postgresql-patches/browse"

# Never merge builds. Each branch should build separately even if they host the same commit
c['collapseRequests'] = False

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8080/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8080,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# ========= DB URL =========

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url': "sqlite:///state.sqlite",
}
